/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 15:31:26 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Triangulator_ESTest_SAMPLED extends Triangulator_ESTest_scaffolding {

/*  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Triangulator triangulator0 = new Triangulator("bDC)GP+eK/<GaV", (-896), 3, (-2595));
          assertNotNull(triangulator0);
          
          int int0 = triangulator0.findTriangleType();
          assertEquals(2, int0);
          
          int int1 = triangulator0.findTriangleType();
          assertTrue(int1 == int0);
          assertEquals(2, int1);
          
          int int2 = triangulator0.findTriangleType();
          assertTrue(int2 == int1);
          assertTrue(int2 == int0);
          assertEquals(2, int2);
          
          int int3 = triangulator0.findTriangleType();
          assertTrue(int3 == int1);
          assertTrue(int3 == int2);
          assertTrue(int3 == int0);
          assertEquals(2, int3);
          
          String[] stringArray0 = new String[8];
          stringArray0[0] = "bDC)GP+eK/<GaV";
          stringArray0[1] = "bDC)GP+eK/<GaV";
          stringArray0[2] = "bDC)GP+eK/<GaV";
          stringArray0[3] = "bDC)GP+eK/<GaV";
          stringArray0[4] = "bDC)GP+eK/<GaV";
          stringArray0[5] = "bDC)GP+eK/<GaV";
          stringArray0[6] = "bDC)GP+eK/<GaV";
          stringArray0[7] = "bDC)GP+eK/<GaV";
          Triangulator.main(stringArray0);
          assertEquals(8, stringArray0.length);
          
          String[] stringArray1 = new String[8];
          assertFalse(stringArray1.equals((Object)stringArray0));
          
          stringArray1[0] = "bDC)GP+eK/<GaV";
          stringArray1[1] = "bDC)GP+eK/<GaV";
          stringArray1[2] = "bDC)GP+eK/<GaV";
          stringArray1[3] = "bDC)GP+eK/<GaV";
          stringArray1[4] = "bDC)GP+eK/<GaV";
          stringArray1[5] = "bDC)GP+eK/<GaV";
          stringArray1[6] = "bDC)GP+eK/<GaV";
          stringArray1[7] = "bDC)GP+eK/<GaV";
          Triangulator.main(stringArray1);
          assertFalse(stringArray1.equals((Object)stringArray0));
          assertEquals(8, stringArray1.length);
          assertNotSame(stringArray1, stringArray0);
          
          Triangulator.main(stringArray1);
          assertFalse(stringArray1.equals((Object)stringArray0));
          assertEquals(8, stringArray1.length);
          assertNotSame(stringArray1, stringArray0);
          
          int int4 = triangulator0.findTriangleType();
          assertTrue(int4 == int1);
          assertTrue(int4 == int2);
          assertTrue(int4 == int3);
          assertTrue(int4 == int0);
          assertEquals(2, int4);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

*/  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Triangulator triangulator0 = new Triangulator("S87hN&]mK&", 6, 1, (-380));
          assertNotNull(triangulator0);
          
          String[] stringArray0 = new String[8];
          stringArray0[0] = "S87hN&]mK&";
          stringArray0[1] = "S87hN&]mK&";
          stringArray0[2] = "lCR+N+4";
          stringArray0[3] = "S87hN&]mK&";
          stringArray0[4] = "S87hN&]mK&";
          stringArray0[5] = "S87hN&]mK&";
          stringArray0[6] = "S87hN&]mK&";
          int int0 = triangulator0.findTriangleType();
          assertEquals(2, int0);
          
          stringArray0[7] = "S87hN&]mK&";
          Triangulator.main(stringArray0);
          assertEquals(8, stringArray0.length);
          
          int int1 = triangulator0.findTriangleType();
          assertTrue(int1 == int0);
          assertEquals(2, int1);
          
          int int2 = triangulator0.findTriangleType();
          assertTrue(int2 == int0);
          assertTrue(int2 == int1);
          assertEquals(2, int2);
          
          int int3 = triangulator0.findTriangleType();
          assertTrue(int3 == int1);
          assertTrue(int3 == int2);
          assertTrue(int3 == int0);
          assertEquals(2, int3);
          
          int int4 = triangulator0.findTriangleType();
          assertTrue(int4 == int2);
          assertTrue(int4 == int3);
          assertTrue(int4 == int1);
          assertTrue(int4 == int0);
          assertEquals(2, int4);
          
          int int5 = triangulator0.findTriangleType();
          assertTrue(int5 == int4);
          assertTrue(int5 == int1);
          assertTrue(int5 == int3);
          assertTrue(int5 == int0);
          assertTrue(int5 == int2);
          assertEquals(2, int5);
          
          int int6 = triangulator0.findTriangleType();
          assertTrue(int6 == int5);
          assertTrue(int6 == int3);
          assertTrue(int6 == int4);
          assertTrue(int6 == int0);
          assertTrue(int6 == int2);
          assertTrue(int6 == int1);
          assertEquals(2, int6);
          
          int int7 = triangulator0.findTriangleType();
          assertTrue(int7 == int2);
          assertTrue(int7 == int3);
          assertTrue(int7 == int6);
          assertTrue(int7 == int4);
          assertTrue(int7 == int5);
          assertTrue(int7 == int0);
          assertTrue(int7 == int1);
          assertEquals(2, int7);
          
          Triangulator.main(stringArray0);
          assertEquals(8, stringArray0.length);
          
          int int8 = triangulator0.findTriangleType();
          assertTrue(int8 == int0);
          assertTrue(int8 == int1);
          assertTrue(int8 == int2);
          assertTrue(int8 == int3);
          assertTrue(int8 == int6);
          assertTrue(int8 == int7);
          assertTrue(int8 == int4);
          assertTrue(int8 == int5);
          assertEquals(2, int8);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

/*  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Triangulator triangulator0 = new Triangulator("h#kygL C1!%nKM", (-1316), (-1316), 0);
      assertNotNull(triangulator0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h#kygL C1!%nKM";
      stringArray0[1] = "h#kygL C1!%nKM";
      stringArray0[2] = "h#kygL C1!%nKM";
      Triangulator.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      Triangulator.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

*/  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Triangulator triangulator0 = new Triangulator("", (-240), (-91), (-240));
      assertNotNull(triangulator0);
      
      String[] stringArray0 = new String[7];
      int int0 = triangulator0.findTriangleType();
      assertEquals(2, int0);
      
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Triangulator.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      stringArray0[3] = "";
      stringArray0[4] = "";
      int int1 = triangulator0.findTriangleType();
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      stringArray0[5] = "";
      stringArray0[6] = "";
      Triangulator.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      int int2 = triangulator0.findTriangleType();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, int2);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      Triangulator.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = new String[7];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray2[4] = "";
      stringArray2[5] = "";
      stringArray2[6] = "";
      Triangulator.main(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(7, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      Triangulator.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Triangulator triangulator0 = new Triangulator("`Z=id TCL7{e", 1640, 1640, 1122);
          assertNotNull(triangulator0);
          
          String[] stringArray0 = new String[9];
          stringArray0[0] = "`Z=id TCL7{e";
          stringArray0[1] = "`Z=id TCL7{e";
          stringArray0[2] = "`Z=id TCL7{e";
          stringArray0[3] = "`Z=id TCL7{e";
          stringArray0[4] = "`Z=id TCL7{e";
          stringArray0[5] = "`Z=id TCL7{e";
          stringArray0[6] = "";
          stringArray0[7] = "sRc";
          stringArray0[8] = "`Z=id TCL7{e";
          Triangulator.main(stringArray0);
          assertEquals(9, stringArray0.length);
          
          int int0 = triangulator0.findTriangleType();
          assertEquals(2, int0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Triangulator triangulator0 = new Triangulator((String) null, 3025, 3025, (-555));
      assertNotNull(triangulator0);
      
      int int0 = triangulator0.findTriangleType();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Triangulator triangulator0 = new Triangulator((String) null, (-1), (-1), (-1493));
      assertNotNull(triangulator0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "jzJ";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      Triangulator.main(stringArray0);
      assertEquals(5, stringArray0.length);
      
      int int0 = triangulator0.findTriangleType();
      assertEquals(2, int0);
      
      int int1 = triangulator0.findTriangleType();
      assertTrue(int1 == int0);
      assertEquals(2, int1);
  }
}
